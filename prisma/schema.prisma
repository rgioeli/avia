generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    username      String?
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    replies       Reply[]
    posts         Post[]
    likes         Like[]
    profile       Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Like {
    id      String  @id @default(cuid())
    reply   Reply?  @relation(fields: [replyId], references: [id])
    replyId String?
    post    Post?   @relation(fields: [postId], references: [id])
    postId  String?
    user    User?   @relation(fields: [userId], references: [id])
    userId  String?
}

model Post {
    id        String   @id @default(cuid())
    content   String
    channel   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    replies   Reply[]
    likes     Like[]
}

model Profile {
    id        String   @id @default(cuid())
    bio       String?
    diagnosis String[]
    facebook  String?
    instagram String?
    tiktok    String?
    twitter   String?
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?  @unique
}

model Reply {
    id           String   @id @default(cuid())
    content      String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User?    @relation(fields: [userId], references: [id])
    userId       String?
    post         Post?    @relation(fields: [postId], references: [id])
    postId       String?
    parent       Reply?   @relation("ChildReply", fields: [parentId], references: [id])
    parentId     String?
    childReplies Reply[]  @relation("ChildReply")
    likes        Like[]
}

model MedicalSearchTerm {
    id   String @id @default(cuid())
    term String
}
